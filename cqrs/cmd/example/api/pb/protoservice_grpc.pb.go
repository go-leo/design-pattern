// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: cqrs/cmd/example/api/pb/protoservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProtoService_DemoCommand_FullMethodName = "/pb.ProtoService/DemoCommand"
	ProtoService_DemoQuery_FullMethodName   = "/pb.ProtoService/DemoQuery"
	ProtoService_DemoDefault_FullMethodName = "/pb.ProtoService/DemoDefault"
)

// ProtoServiceClient is the client API for ProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoServiceClient interface {
	// @CQRS @Command
	DemoCommand(ctx context.Context, in *DemoCommandRequest, opts ...grpc.CallOption) (*DemoCommandReply, error)
	// @CQRS @Query
	DemoQuery(ctx context.Context, in *DemoQueryRequest, opts ...grpc.CallOption) (*DemoQueryReply, error)
	DemoDefault(ctx context.Context, in *DemoDefaultRequest, opts ...grpc.CallOption) (*DemoDefaultReply, error)
}

type protoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoServiceClient(cc grpc.ClientConnInterface) ProtoServiceClient {
	return &protoServiceClient{cc}
}

func (c *protoServiceClient) DemoCommand(ctx context.Context, in *DemoCommandRequest, opts ...grpc.CallOption) (*DemoCommandReply, error) {
	out := new(DemoCommandReply)
	err := c.cc.Invoke(ctx, ProtoService_DemoCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) DemoQuery(ctx context.Context, in *DemoQueryRequest, opts ...grpc.CallOption) (*DemoQueryReply, error) {
	out := new(DemoQueryReply)
	err := c.cc.Invoke(ctx, ProtoService_DemoQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) DemoDefault(ctx context.Context, in *DemoDefaultRequest, opts ...grpc.CallOption) (*DemoDefaultReply, error) {
	out := new(DemoDefaultReply)
	err := c.cc.Invoke(ctx, ProtoService_DemoDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoServiceServer is the server API for ProtoService service.
// All implementations must embed UnimplementedProtoServiceServer
// for forward compatibility
type ProtoServiceServer interface {
	// @CQRS @Command
	DemoCommand(context.Context, *DemoCommandRequest) (*DemoCommandReply, error)
	// @CQRS @Query
	DemoQuery(context.Context, *DemoQueryRequest) (*DemoQueryReply, error)
	DemoDefault(context.Context, *DemoDefaultRequest) (*DemoDefaultReply, error)
	mustEmbedUnimplementedProtoServiceServer()
}

// UnimplementedProtoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtoServiceServer struct {
}

func (UnimplementedProtoServiceServer) DemoCommand(context.Context, *DemoCommandRequest) (*DemoCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoCommand not implemented")
}
func (UnimplementedProtoServiceServer) DemoQuery(context.Context, *DemoQueryRequest) (*DemoQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoQuery not implemented")
}
func (UnimplementedProtoServiceServer) DemoDefault(context.Context, *DemoDefaultRequest) (*DemoDefaultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoDefault not implemented")
}
func (UnimplementedProtoServiceServer) mustEmbedUnimplementedProtoServiceServer() {}

// UnsafeProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoServiceServer will
// result in compilation errors.
type UnsafeProtoServiceServer interface {
	mustEmbedUnimplementedProtoServiceServer()
}

func RegisterProtoServiceServer(s grpc.ServiceRegistrar, srv ProtoServiceServer) {
	s.RegisterService(&ProtoService_ServiceDesc, srv)
}

func _ProtoService_DemoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).DemoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoService_DemoCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).DemoCommand(ctx, req.(*DemoCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_DemoQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).DemoQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoService_DemoQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).DemoQuery(ctx, req.(*DemoQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_DemoDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).DemoDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtoService_DemoDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).DemoDefault(ctx, req.(*DemoDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoService_ServiceDesc is the grpc.ServiceDesc for ProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProtoService",
	HandlerType: (*ProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DemoCommand",
			Handler:    _ProtoService_DemoCommand_Handler,
		},
		{
			MethodName: "DemoQuery",
			Handler:    _ProtoService_DemoQuery_Handler,
		},
		{
			MethodName: "DemoDefault",
			Handler:    _ProtoService_DemoDefault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cqrs/cmd/example/api/pb/protoservice.proto",
}
